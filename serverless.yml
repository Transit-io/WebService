org: domenicocammarota
app: web-service
service: web-service
frameworkVersion: '2'
useDotenv: true

provider:
    name: aws
    region: ${env:REGION}

custom:
    stage: ${env:STAGE}
    prefix: ${self:service}-${self:custom.stage}
    vpcId:
        Fn::ImportValue: network-${self:custom.stage}-vpc-id
    PublicSubnetAZ0ID:
        Fn::ImportValue: network-${self:custom.stage}-public-subnet-az0-id
    PublicSubnetAZ1ID:
        Fn::ImportValue: network-${self:custom.stage}-public-subnet-az1-id
    WebSecurityGroupId:
        Fn::ImportValue: network-${self:custom.stage}-web-security-group-id
    MediaClusterName: clusters-${self:custom.stage}-media-cluster
    MediaClusterArn:
        Fn::ImportValue: clusters-${self:custom.stage}-media-cluster-arn

resources:
    Resources:

        # This service manages instances of the web task
        WebService:
            Type: AWS::ECS::Service
            DependsOn:
                - WebListener
                - WebServiceRole
            Properties:
                Cluster: ${self:custom.MediaClusterArn}
                DeploymentConfiguration:
                    MaximumPercent: 200
                    MinimumHealthyPercent: 100
                    DeploymentCircuitBreaker:
                        Enable: false
                        Rollback: false
                DesiredCount: 1
                HealthCheckGracePeriodSeconds: 5
                LaunchType: EC2
                LoadBalancers:
                    - TargetGroupArn: !Ref WebTargetGroup
                      ContainerName: web-container
                      ContainerPort: 3000
                PlacementStrategies:
                    - Type: binpack
                      Field: MEMORY
                Role: { Ref: WebServiceRole }
                SchedulingStrategy: REPLICA
                ServiceName: web-service
                TaskDefinition: !Ref WebTaskDefinition

        WebTaskDefinition:
            Type: AWS::ECS::TaskDefinition
            Properties:
                ContainerDefinitions:
                    - Essential: true
                      Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/web-repo:latest"
                      Name: web-container
                      PortMappings:
                          - ContainerPort: 3000
                            HostPort: 0
                            Protocol: tcp
                Cpu: 2048
                Family: web-task
                Memory: 950
                RequiresCompatibilities:
                    - EC2

        # This load balences traffic across web task instances
        WebLoadBalancer:
            Type: AWS::ElasticLoadBalancingV2::LoadBalancer
            Properties:
                IpAddressType: ipv4
                LoadBalancerAttributes:
                    - Key: access_logs.s3.enabled
                      Value: false
                    - Key: idle_timeout.timeout_seconds
                      Value: 60
                    - Key: deletion_protection.enabled
                      Value: false
                    - Key: routing.http2.enabled
                      Value: true
                    - Key: routing.http.drop_invalid_header_fields.enabled
                      Value: false
                    - Key: routing.http.xff_client_port.enabled
                      Value: false
                    - Key: routing.http.desync_mitigation_mode
                      Value: defensive
                    - Key: waf.fail_open.enabled
                      Value: false
                    - Key: routing.http.x_amzn_tls_version_and_cipher_suite.enabled
                      Value: false
                Name: ${self:custom.prefix}-alb
                Scheme: internet-facing
                Subnets:
                    - ${self:custom.PublicSubnetAZ0ID}
                    - ${self:custom.PublicSubnetAZ1ID}
                SecurityGroups:
                    - ${self:custom.WebSecurityGroupId}
                Type: application

        WebTargetGroup:
            Type: AWS::ElasticLoadBalancingV2::TargetGroup
            Properties:
                HealthCheckIntervalSeconds: 5
                HealthCheckPath: /
                HealthCheckPort: traffic-port
                HealthCheckProtocol: HTTP
                HealthCheckTimeoutSeconds: 4
                HealthyThresholdCount: 2
                HealthCheckEnabled: true
                Matcher:
                    HttpCode: 200
                Name: ${self:custom.prefix}-tg
                Port: 3000
                Protocol: HTTP
                TargetGroupAttributes:
                    - Key: stickiness.enabled
                      Value: false
                    - Key: deregistration_delay.timeout_seconds
                      Value: 300
                    - Key: stickiness.app_cookie.cookie_name
                      Value: ""
                    - Key: stickiness.type
                      Value: lb_cookie
                    - Key: stickiness.lb_cookie.duration_seconds
                      Value: 86400
                    - Key: slow_start.duration_seconds
                      Value: 0
                    - Key: stickiness.app_cookie.duration_seconds
                      Value: 86400
                    - Key: load_balancing.algorithm.type
                      Value: round_robin
                TargetType: instance
                UnhealthyThresholdCount: 2
                VpcId: ${self:custom.vpcId}

        WebListener:
            Type: AWS::ElasticLoadBalancingV2::Listener
            Properties:
                LoadBalancerArn: !Ref WebLoadBalancer
                Port: 3000
                Protocol: HTTP
                DefaultActions:
                    - Order: 1
                      TargetGroupArn: !Ref WebTargetGroup
                      Type: forward

        WebScalingTarget:
            Type: AWS::ApplicationAutoScaling::ScalableTarget
            Properties:
                MaxCapacity: 50
                MinCapacity: 1
                ResourceId: !Sub "service/${self:custom.MediaClusterName}/${WebService.Name}"
                RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
                ScalableDimension: ecs:service:DesiredCount
                ServiceNamespace: ecs
                SuspendedState:
                    DynamicScalingInSuspended: false
                    DynamicScalingOutSuspended: false
                    ScheduledScalingSuspended: false

        WebScalingPolicy:
            Type: AWS::ApplicationAutoScaling::ScalingPolicy
            Properties:
                PolicyName: ${self:custom.prefix}-web-sp
                PolicyType: TargetTrackingScaling
                ScalableDimension: ecs:service:DesiredCount
                ScalingTargetId: !Ref WebScalingTarget
                ServiceNamespace: ecs
                TargetTrackingScalingPolicyConfiguration:
                    PredefinedMetricSpecification:
                        PredefinedMetricType: ECSServiceAverageCPUUtilization
                    ScaleInCooldown: 30
                    ScaleOutCooldown: 30
                    TargetValue: 75


# ---------- Policies/Roles ----------


        # This is the role assummed by the Web Service
        WebServiceRole:
            Type: AWS::IAM::Role
            Properties:
                AssumeRolePolicyDocument:
                    {
                        "Version": "2008-10-17",
                        "Statement": [
                            {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": {
                                    "Service": "ecs.amazonaws.com"
                                }
                            }
                        ]
                    }
                ManagedPolicyArns:
                    - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
                RoleName: ${self:custom.prefix}-ecs-service-role
